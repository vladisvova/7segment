
7sdisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001548  08001548  00011548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001560  08001560  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001560  08001560  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001560  08001560  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001560  08001560  00011560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001564  08001564  00011564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001574  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001574  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000024d9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b2d  00000000  00000000  00022515  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003c0  00000000  00000000  00023048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000348  00000000  00000000  00023408  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001433c  00000000  00000000  00023750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002d88  00000000  00000000  00037a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d3c2  00000000  00000000  0003a814  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a7bd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d38  00000000  00000000  000a7c54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001530 	.word	0x08001530

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001530 	.word	0x08001530

080001c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	619a      	str	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <setDigitOne>:
#include "digits.h"
#include "main.h"

//TODO: dopln do lavicy funkcie

void setDigitOne(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0

	//LL_GPIO_ResetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
	LL_GPIO_ResetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
 8000204:	2110      	movs	r1, #16
 8000206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020a:	f7ff ffeb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
 800020e:	2140      	movs	r1, #64	; 0x40
 8000210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000214:	f7ff ffe6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_3_GPIO_Port , digit_3_Pin);
 8000218:	2104      	movs	r1, #4
 800021a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021e:	f7ff ffe1 	bl	80001e4 <LL_GPIO_ResetOutputPin>

	LL_GPIO_SetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
 8000222:	2120      	movs	r1, #32
 8000224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000228:	f7ff ffce 	bl	80001c8 <LL_GPIO_SetOutputPin>
	//LL_GPIO_SetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
	//LL_GPIO_SetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
	//LL_GPIO_SetOutputPin(digit_3_GPIO_Port , digit_3_Pin);


}
 800022c:	bf00      	nop
 800022e:	bd80      	pop	{r7, pc}

08000230 <setDigitTwo>:

void setDigitTwo(void){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
 8000234:	2120      	movs	r1, #32
 8000236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023a:	f7ff ffd3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
	LL_GPIO_ResetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
 800023e:	2140      	movs	r1, #64	; 0x40
 8000240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000244:	f7ff ffce 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_3_GPIO_Port , digit_3_Pin);
 8000248:	2104      	movs	r1, #4
 800024a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024e:	f7ff ffc9 	bl	80001e4 <LL_GPIO_ResetOutputPin>

	//LL_GPIO_SetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
	LL_GPIO_SetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
 8000252:	2110      	movs	r1, #16
 8000254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000258:	f7ff ffb6 	bl	80001c8 <LL_GPIO_SetOutputPin>
	//LL_GPIO_SetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
	//LL_GPIO_SetOutputPin(digit_3_GPIO_Port , digit_3_Pin);


}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}

08000260 <setDigitThree>:

void setDigitThree(void){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
 8000264:	2120      	movs	r1, #32
 8000266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800026a:	f7ff ffbb 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
 800026e:	2110      	movs	r1, #16
 8000270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000274:	f7ff ffb6 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
	LL_GPIO_ResetOutputPin(digit_3_GPIO_Port , digit_3_Pin);
 8000278:	2104      	movs	r1, #4
 800027a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027e:	f7ff ffb1 	bl	80001e4 <LL_GPIO_ResetOutputPin>


	//LL_GPIO_SetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
	//LL_GPIO_SetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
	LL_GPIO_SetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
 8000282:	2140      	movs	r1, #64	; 0x40
 8000284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000288:	f7ff ff9e 	bl	80001c8 <LL_GPIO_SetOutputPin>
	//LL_GPIO_SetOutputPin(digit_3_GPIO_Port , digit_3_Pin);


}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}

08000290 <setDigitFour>:


void setDigitFour(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
 8000294:	2120      	movs	r1, #32
 8000296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029a:	f7ff ffa3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
 800029e:	2110      	movs	r1, #16
 80002a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a4:	f7ff ff9e 	bl	80001e4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
 80002a8:	2140      	movs	r1, #64	; 0x40
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ae:	f7ff ff99 	bl	80001e4 <LL_GPIO_ResetOutputPin>


	//LL_GPIO_SetOutputPin(digit_0_GPIO_Port , digit_0_Pin);
	//LL_GPIO_SetOutputPin(digit_1_GPIO_Port , digit_1_Pin);
	//LL_GPIO_SetOutputPin(digit_2_GPIO_Port , digit_2_Pin);
	LL_GPIO_SetOutputPin(digit_3_GPIO_Port , digit_3_Pin);
 80002b2:	2104      	movs	r1, #4
 80002b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b8:	f7ff ff86 	bl	80001c8 <LL_GPIO_SetOutputPin>


}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}

080002c0 <LL_GPIO_SetOutputPin>:
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	683a      	ldr	r2, [r7, #0]
 80002ce:	619a      	str	r2, [r3, #24]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <LL_GPIO_ResetOutputPin>:
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	683a      	ldr	r2, [r7, #0]
 80002ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <V>:

#include "letters.h"
#include "main.h"


void V(void){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0


	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80002fc:	2102      	movs	r1, #2
 80002fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000302:	f7ff ffdd 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8000306:	2101      	movs	r1, #1
 8000308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030c:	f7ff ffd8 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8000310:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000318:	f7ff ffd2 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800031c:	2120      	movs	r1, #32
 800031e:	4811      	ldr	r0, [pc, #68]	; (8000364 <V+0x6c>)
 8000320:	f7ff ffce 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032c:	f7ff ffc8 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8000330:	2108      	movs	r1, #8
 8000332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000336:	f7ff ffc3 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800033a:	2110      	movs	r1, #16
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <V+0x6c>)
 800033e:	f7ff ffbf 	bl	80002c0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8000342:	2101      	movs	r1, #1
 8000344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000348:	f7ff ffc8 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800034c:	2120      	movs	r1, #32
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <V+0x6c>)
 8000350:	f7ff ffc4 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8000354:	2108      	movs	r1, #8
 8000356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035a:	f7ff ffbf 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);



}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	48000400 	.word	0x48000400

08000368 <L>:

void L(void){
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 800036c:	2102      	movs	r1, #2
 800036e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000372:	f7ff ffa5 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8000376:	2101      	movs	r1, #1
 8000378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037c:	f7ff ffa0 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8000380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000388:	f7ff ff9a 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800038c:	2120      	movs	r1, #32
 800038e:	4811      	ldr	r0, [pc, #68]	; (80003d4 <L+0x6c>)
 8000390:	f7ff ff96 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000394:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039c:	f7ff ff90 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80003a0:	2108      	movs	r1, #8
 80003a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a6:	f7ff ff8b 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80003aa:	2110      	movs	r1, #16
 80003ac:	4809      	ldr	r0, [pc, #36]	; (80003d4 <L+0x6c>)
 80003ae:	f7ff ff87 	bl	80002c0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80003b2:	2120      	movs	r1, #32
 80003b4:	4807      	ldr	r0, [pc, #28]	; (80003d4 <L+0x6c>)
 80003b6:	f7ff ff91 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80003ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c2:	f7ff ff8b 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80003c6:	2108      	movs	r1, #8
 80003c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003cc:	f7ff ff86 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);



}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	48000400 	.word	0x48000400

080003d8 <A>:


void A(void){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80003dc:	2102      	movs	r1, #2
 80003de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e2:	f7ff ff6d 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80003e6:	2101      	movs	r1, #1
 80003e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ec:	f7ff ff68 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80003f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f8:	f7ff ff62 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80003fc:	2120      	movs	r1, #32
 80003fe:	4819      	ldr	r0, [pc, #100]	; (8000464 <A+0x8c>)
 8000400:	f7ff ff5e 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000404:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040c:	f7ff ff58 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8000410:	2108      	movs	r1, #8
 8000412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000416:	f7ff ff53 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800041a:	2110      	movs	r1, #16
 800041c:	4811      	ldr	r0, [pc, #68]	; (8000464 <A+0x8c>)
 800041e:	f7ff ff4f 	bl	80002c0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8000422:	2102      	movs	r1, #2
 8000424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000428:	f7ff ff58 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 800042c:	2101      	movs	r1, #1
 800042e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000432:	f7ff ff53 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8000436:	f44f 7180 	mov.w	r1, #256	; 0x100
 800043a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043e:	f7ff ff4d 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000442:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044a:	f7ff ff47 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800044e:	2108      	movs	r1, #8
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f7ff ff42 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8000458:	2110      	movs	r1, #16
 800045a:	4802      	ldr	r0, [pc, #8]	; (8000464 <A+0x8c>)
 800045c:	f7ff ff3e 	bl	80002dc <LL_GPIO_ResetOutputPin>



}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	48000400 	.word	0x48000400

08000468 <D>:


void D(void){
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 800046c:	2102      	movs	r1, #2
 800046e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000472:	f7ff ff25 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8000476:	2101      	movs	r1, #1
 8000478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047c:	f7ff ff20 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8000480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000488:	f7ff ff1a 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800048c:	2120      	movs	r1, #32
 800048e:	4816      	ldr	r0, [pc, #88]	; (80004e8 <D+0x80>)
 8000490:	f7ff ff16 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000494:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049c:	f7ff ff10 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80004a0:	2108      	movs	r1, #8
 80004a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a6:	f7ff ff0b 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80004aa:	2110      	movs	r1, #16
 80004ac:	480e      	ldr	r0, [pc, #56]	; (80004e8 <D+0x80>)
 80004ae:	f7ff ff07 	bl	80002c0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80004b2:	2101      	movs	r1, #1
 80004b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b8:	f7ff ff10 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80004bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c4:	f7ff ff0a 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80004c8:	2120      	movs	r1, #32
 80004ca:	4807      	ldr	r0, [pc, #28]	; (80004e8 <D+0x80>)
 80004cc:	f7ff ff06 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80004d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d8:	f7ff ff00 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80004dc:	2110      	movs	r1, #16
 80004de:	4802      	ldr	r0, [pc, #8]	; (80004e8 <D+0x80>)
 80004e0:	f7ff fefc 	bl	80002dc <LL_GPIO_ResetOutputPin>



}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	48000400 	.word	0x48000400

080004ec <I>:


void I(void){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80004f0:	2102      	movs	r1, #2
 80004f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f6:	f7ff fee3 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80004fa:	2101      	movs	r1, #1
 80004fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000500:	f7ff fede 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8000504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f7ff fed8 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8000510:	2120      	movs	r1, #32
 8000512:	480f      	ldr	r0, [pc, #60]	; (8000550 <I+0x64>)
 8000514:	f7ff fed4 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000518:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f7ff fece 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8000524:	2108      	movs	r1, #8
 8000526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052a:	f7ff fec9 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800052e:	2110      	movs	r1, #16
 8000530:	4807      	ldr	r0, [pc, #28]	; (8000550 <I+0x64>)
 8000532:	f7ff fec5 	bl	80002c0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000536:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800053a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053e:	f7ff fecd 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8000542:	2108      	movs	r1, #8
 8000544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000548:	f7ff fec8 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);



}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	48000400 	.word	0x48000400

08000554 <M>:

void M(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8000558:	2102      	movs	r1, #2
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f7ff feaf 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8000562:	2101      	movs	r1, #1
 8000564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000568:	f7ff feaa 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800056c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000574:	f7ff fea4 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8000578:	2120      	movs	r1, #32
 800057a:	4813      	ldr	r0, [pc, #76]	; (80005c8 <M+0x74>)
 800057c:	f7ff fea0 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000588:	f7ff fe9a 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800058c:	2108      	movs	r1, #8
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f7ff fe95 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8000596:	2110      	movs	r1, #16
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <M+0x74>)
 800059a:	f7ff fe91 	bl	80002c0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 800059e:	2102      	movs	r1, #2
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a4:	f7ff fe9a 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80005a8:	2101      	movs	r1, #1
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ae:	f7ff fe95 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80005b2:	2120      	movs	r1, #32
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <M+0x74>)
 80005b6:	f7ff fe91 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80005ba:	2108      	movs	r1, #8
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c0:	f7ff fe8c 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);



}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	48000400 	.word	0x48000400

080005cc <R>:

void R(void){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80005d0:	2102      	movs	r1, #2
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d6:	f7ff fe73 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80005da:	2101      	movs	r1, #1
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f7ff fe6e 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f7ff fe68 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80005f0:	2120      	movs	r1, #32
 80005f2:	480f      	ldr	r0, [pc, #60]	; (8000630 <R+0x64>)
 80005f4:	f7ff fe64 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80005f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000600:	f7ff fe5e 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8000604:	2108      	movs	r1, #8
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f7ff fe59 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800060e:	2110      	movs	r1, #16
 8000610:	4807      	ldr	r0, [pc, #28]	; (8000630 <R+0x64>)
 8000612:	f7ff fe55 	bl	80002c0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000616:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f7ff fe5d 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8000622:	2110      	movs	r1, #16
 8000624:	4802      	ldr	r0, [pc, #8]	; (8000630 <R+0x64>)
 8000626:	f7ff fe59 	bl	80002dc <LL_GPIO_ResetOutputPin>



}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	48000400 	.word	0x48000400

08000634 <_>:



void _(void){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8000638:	2102      	movs	r1, #2
 800063a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063e:	f7ff fe3f 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8000642:	2101      	movs	r1, #1
 8000644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000648:	f7ff fe3a 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800064c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f7ff fe34 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8000658:	2120      	movs	r1, #32
 800065a:	480c      	ldr	r0, [pc, #48]	; (800068c <_+0x58>)
 800065c:	f7ff fe30 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000660:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000668:	f7ff fe2a 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800066c:	2108      	movs	r1, #8
 800066e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000672:	f7ff fe25 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8000676:	2110      	movs	r1, #16
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <_+0x58>)
 800067a:	f7ff fe21 	bl	80002c0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800067e:	2120      	movs	r1, #32
 8000680:	4802      	ldr	r0, [pc, #8]	; (800068c <_+0x58>)
 8000682:	f7ff fe2b 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	//LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);



}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	48000400 	.word	0x48000400

08000690 <B>:
void B(void){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8000694:	2102      	movs	r1, #2
 8000696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069a:	f7ff fe11 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 800069e:	2101      	movs	r1, #1
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f7ff fe0c 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80006a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f7ff fe06 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80006b4:	2120      	movs	r1, #32
 80006b6:	4816      	ldr	r0, [pc, #88]	; (8000710 <B+0x80>)
 80006b8:	f7ff fe02 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80006bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f7ff fdfc 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80006c8:	2108      	movs	r1, #8
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f7ff fdf7 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80006d2:	2110      	movs	r1, #16
 80006d4:	480e      	ldr	r0, [pc, #56]	; (8000710 <B+0x80>)
 80006d6:	f7ff fdf3 	bl	80002c0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80006da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f7ff fdfb 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80006e6:	2120      	movs	r1, #32
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <B+0x80>)
 80006ea:	f7ff fdf7 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80006ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f6:	f7ff fdf1 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80006fa:	2108      	movs	r1, #8
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000700:	f7ff fdec 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8000704:	2110      	movs	r1, #16
 8000706:	4802      	ldr	r0, [pc, #8]	; (8000710 <B+0x80>)
 8000708:	f7ff fde8 	bl	80002dc <LL_GPIO_ResetOutputPin>



}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	48000400 	.word	0x48000400

08000714 <E>:
void E(void){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8000718:	2102      	movs	r1, #2
 800071a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071e:	f7ff fdcf 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8000722:	2101      	movs	r1, #1
 8000724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000728:	f7ff fdca 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 800072c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f7ff fdc4 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8000738:	2120      	movs	r1, #32
 800073a:	4816      	ldr	r0, [pc, #88]	; (8000794 <E+0x80>)
 800073c:	f7ff fdc0 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000748:	f7ff fdba 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800074c:	2108      	movs	r1, #8
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f7ff fdb5 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8000756:	2110      	movs	r1, #16
 8000758:	480e      	ldr	r0, [pc, #56]	; (8000794 <E+0x80>)
 800075a:	f7ff fdb1 	bl	80002c0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 800075e:	2102      	movs	r1, #2
 8000760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000764:	f7ff fdba 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8000768:	2120      	movs	r1, #32
 800076a:	480a      	ldr	r0, [pc, #40]	; (8000794 <E+0x80>)
 800076c:	f7ff fdb6 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000770:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f7ff fdb0 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 800077c:	2108      	movs	r1, #8
 800077e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000782:	f7ff fdab 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8000786:	2110      	movs	r1, #16
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <E+0x80>)
 800078a:	f7ff fda7 	bl	80002dc <LL_GPIO_ResetOutputPin>



}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	48000400 	.word	0x48000400

08000798 <N>:
void N(void){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 800079c:	2102      	movs	r1, #2
 800079e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a2:	f7ff fd8d 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80007a6:	2101      	movs	r1, #1
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f7ff fd88 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80007b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b8:	f7ff fd82 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80007bc:	2120      	movs	r1, #32
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <N+0x70>)
 80007c0:	f7ff fd7e 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80007c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007cc:	f7ff fd78 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80007d0:	2108      	movs	r1, #8
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f7ff fd73 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80007da:	2110      	movs	r1, #16
 80007dc:	480a      	ldr	r0, [pc, #40]	; (8000808 <N+0x70>)
 80007de:	f7ff fd6f 	bl	80002c0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80007e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f7ff fd77 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80007ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f6:	f7ff fd71 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80007fa:	2110      	movs	r1, #16
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <N+0x70>)
 80007fe:	f7ff fd6d 	bl	80002dc <LL_GPIO_ResetOutputPin>



}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	48000400 	.word	0x48000400

0800080c <K>:
void K(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8000810:	2102      	movs	r1, #2
 8000812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000816:	f7ff fd53 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 800081a:	2101      	movs	r1, #1
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f7ff fd4e 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8000824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082c:	f7ff fd48 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8000830:	2120      	movs	r1, #32
 8000832:	4817      	ldr	r0, [pc, #92]	; (8000890 <K+0x84>)
 8000834:	f7ff fd44 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000840:	f7ff fd3e 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8000844:	2108      	movs	r1, #8
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f7ff fd39 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800084e:	2110      	movs	r1, #16
 8000850:	480f      	ldr	r0, [pc, #60]	; (8000890 <K+0x84>)
 8000852:	f7ff fd35 	bl	80002c0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8000856:	2102      	movs	r1, #2
 8000858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085c:	f7ff fd3e 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8000860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f7ff fd38 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 800086c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f7ff fd32 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8000878:	2108      	movs	r1, #8
 800087a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087e:	f7ff fd2d 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8000882:	2110      	movs	r1, #16
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <K+0x84>)
 8000886:	f7ff fd29 	bl	80002dc <LL_GPIO_ResetOutputPin>



}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	48000400 	.word	0x48000400

08000894 <eight>:



void eight(void){
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8000898:	2102      	movs	r1, #2
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f7ff fd0f 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80008a2:	2101      	movs	r1, #1
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a8:	f7ff fd0a 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80008ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f7ff fd04 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80008b8:	2120      	movs	r1, #32
 80008ba:	481b      	ldr	r0, [pc, #108]	; (8000928 <eight+0x94>)
 80008bc:	f7ff fd00 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80008c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f7ff fcfa 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80008cc:	2108      	movs	r1, #8
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d2:	f7ff fcf5 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80008d6:	2110      	movs	r1, #16
 80008d8:	4813      	ldr	r0, [pc, #76]	; (8000928 <eight+0x94>)
 80008da:	f7ff fcf1 	bl	80002c0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80008de:	2102      	movs	r1, #2
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e4:	f7ff fcfa 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80008e8:	2101      	movs	r1, #1
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f7ff fcf5 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80008f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fa:	f7ff fcef 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80008fe:	2120      	movs	r1, #32
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <eight+0x94>)
 8000902:	f7ff fceb 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000906:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f7ff fce5 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8000912:	2108      	movs	r1, #8
 8000914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000918:	f7ff fce0 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800091c:	2110      	movs	r1, #16
 800091e:	4802      	ldr	r0, [pc, #8]	; (8000928 <eight+0x94>)
 8000920:	f7ff fcdc 	bl	80002dc <LL_GPIO_ResetOutputPin>



}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	48000400 	.word	0x48000400

0800092c <six>:
void six(void){
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8000930:	2102      	movs	r1, #2
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f7ff fcc3 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 800093a:	2101      	movs	r1, #1
 800093c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000940:	f7ff fcbe 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8000944:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f7ff fcb8 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8000950:	2120      	movs	r1, #32
 8000952:	4819      	ldr	r0, [pc, #100]	; (80009b8 <six+0x8c>)
 8000954:	f7ff fcb4 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000958:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f7ff fcae 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8000964:	2108      	movs	r1, #8
 8000966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096a:	f7ff fca9 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 800096e:	2110      	movs	r1, #16
 8000970:	4811      	ldr	r0, [pc, #68]	; (80009b8 <six+0x8c>)
 8000972:	f7ff fca5 	bl	80002c0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8000976:	2102      	movs	r1, #2
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f7ff fcae 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8000980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000988:	f7ff fca8 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 800098c:	2120      	movs	r1, #32
 800098e:	480a      	ldr	r0, [pc, #40]	; (80009b8 <six+0x8c>)
 8000990:	f7ff fca4 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000994:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f7ff fc9e 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80009a0:	2108      	movs	r1, #8
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f7ff fc99 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80009aa:	2110      	movs	r1, #16
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <six+0x8c>)
 80009ae:	f7ff fc95 	bl	80002dc <LL_GPIO_ResetOutputPin>



}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	48000400 	.word	0x48000400

080009bc <four>:


void four(void){
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 80009c0:	2102      	movs	r1, #2
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c6:	f7ff fc7b 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 80009ca:	2101      	movs	r1, #1
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f7ff fc76 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009dc:	f7ff fc70 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 80009e0:	2120      	movs	r1, #32
 80009e2:	4814      	ldr	r0, [pc, #80]	; (8000a34 <four+0x78>)
 80009e4:	f7ff fc6c 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 80009e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f0:	f7ff fc66 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 80009f4:	2108      	movs	r1, #8
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fa:	f7ff fc61 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 80009fe:	2110      	movs	r1, #16
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <four+0x78>)
 8000a02:	f7ff fc5d 	bl	80002c0 <LL_GPIO_SetOutputPin>

	//LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8000a06:	2101      	movs	r1, #1
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f7ff fc66 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8000a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f7ff fc60 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
	//LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
	LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8000a1c:	2108      	movs	r1, #8
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f7ff fc5b 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8000a26:	2110      	movs	r1, #16
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <four+0x78>)
 8000a2a:	f7ff fc57 	bl	80002dc <LL_GPIO_ResetOutputPin>



}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	48000400 	.word	0x48000400

08000a38 <two>:

void two(void){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a42:	f7ff fc3d 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8000a46:	2101      	movs	r1, #1
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f7ff fc38 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
 8000a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f7ff fc32 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	4816      	ldr	r0, [pc, #88]	; (8000ab8 <two+0x80>)
 8000a60:	f7ff fc2e 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000a64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6c:	f7ff fc28 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
 8000a70:	2108      	movs	r1, #8
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f7ff fc23 	bl	80002c0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <two+0x80>)
 8000a7e:	f7ff fc1f 	bl	80002c0 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(segment_A_GPIO_Port, segment_A_Pin);
 8000a82:	2102      	movs	r1, #2
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f7ff fc28 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_B_GPIO_Port, segment_B_Pin);
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a92:	f7ff fc23 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_C_GPIO_Port, segment_C_Pin);
	LL_GPIO_ResetOutputPin(segment_D_GPIO_Port, segment_D_Pin);
 8000a96:	2120      	movs	r1, #32
 8000a98:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <two+0x80>)
 8000a9a:	f7ff fc1f 	bl	80002dc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(segment_E_GPIO_Port, segment_E_Pin);
 8000a9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa6:	f7ff fc19 	bl	80002dc <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(segment_F_GPIO_Port, segment_F_Pin);
	LL_GPIO_ResetOutputPin(segment_G_GPIO_Port, segment_G_Pin);
 8000aaa:	2110      	movs	r1, #16
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <two+0x80>)
 8000aae:	f7ff fc15 	bl	80002dc <LL_GPIO_ResetOutputPin>



}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	48000400 	.word	0x48000400

08000abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aee:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	60d3      	str	r3, [r2, #12]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <LL_RCC_HSI_Enable+0x1c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <LL_RCC_HSI_Enable+0x1c>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000

08000b24 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <LL_RCC_HSI_IsReady+0x20>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	bf0c      	ite	eq
 8000b34:	2301      	moveq	r3, #1
 8000b36:	2300      	movne	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40021000 	.word	0x40021000

08000b48 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	4904      	ldr	r1, [pc, #16]	; (8000b70 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	600b      	str	r3, [r1, #0]
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000

08000b74 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <LL_RCC_SetSysClkSource+0x24>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f023 0203 	bic.w	r2, r3, #3
 8000b84:	4904      	ldr	r1, [pc, #16]	; (8000b98 <LL_RCC_SetSysClkSource+0x24>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	604b      	str	r3, [r1, #4]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	40021000 	.word	0x40021000

08000b9c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <LL_RCC_GetSysClkSource+0x18>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 030c 	and.w	r3, r3, #12
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <LL_RCC_SetAHBPrescaler+0x24>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000bc8:	4904      	ldr	r1, [pc, #16]	; (8000bdc <LL_RCC_SetAHBPrescaler+0x24>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	604b      	str	r3, [r1, #4]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	40021000 	.word	0x40021000

08000be0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000bf0:	4904      	ldr	r1, [pc, #16]	; (8000c04 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	604b      	str	r3, [r1, #4]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	40021000 	.word	0x40021000

08000c08 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000c18:	4904      	ldr	r1, [pc, #16]	; (8000c2c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	604b      	str	r3, [r1, #4]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	40021000 	.word	0x40021000

08000c30 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c3a:	695a      	ldr	r2, [r3, #20]
 8000c3c:	4907      	ldr	r1, [pc, #28]	; (8000c5c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c46:	695a      	ldr	r2, [r3, #20]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	40021000 	.word	0x40021000

08000c60 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c6a:	69da      	ldr	r2, [r3, #28]
 8000c6c:	4907      	ldr	r1, [pc, #28]	; (8000c8c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c76:	69da      	ldr	r2, [r3, #28]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40021000 	.word	0x40021000

08000c90 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c9a:	699a      	ldr	r2, [r3, #24]
 8000c9c:	4907      	ldr	r1, [pc, #28]	; (8000cbc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ca6:	699a      	ldr	r2, [r3, #24]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4013      	ands	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <LL_FLASH_SetLatency+0x24>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f023 0207 	bic.w	r2, r3, #7
 8000cd0:	4904      	ldr	r1, [pc, #16]	; (8000ce4 <LL_FLASH_SetLatency+0x24>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	600b      	str	r3, [r1, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	40022000 	.word	0x40022000

08000ce8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <LL_FLASH_GetLatency+0x18>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0307 	and.w	r3, r3, #7
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40022000 	.word	0x40022000

08000d04 <LL_GPIO_ResetOutputPin>:
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff ffb3 	bl	8000c90 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000d2a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000d2e:	f7ff ff97 	bl	8000c60 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d32:	2003      	movs	r0, #3
 8000d34:	f7ff fec2 	bl	8000abc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d38:	f000 f806 	bl	8000d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3c:	f000 f836 	bl	8000dac <MX_GPIO_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  processToDisplay();
 8000d40:	f000 f878 	bl	8000e34 <processToDisplay>
 8000d44:	e7fc      	b.n	8000d40 <main+0x20>
	...

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff ffb7 	bl	8000cc0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000d52:	bf00      	nop
 8000d54:	f7ff ffc8 	bl	8000ce8 <LL_FLASH_GetLatency>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1fa      	bne.n	8000d54 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000d5e:	f7ff fed1 	bl	8000b04 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000d62:	bf00      	nop
 8000d64:	f7ff fede 	bl	8000b24 <LL_RCC_HSI_IsReady>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d1fa      	bne.n	8000d64 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000d6e:	2010      	movs	r0, #16
 8000d70:	f7ff feea 	bl	8000b48 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff ff1f 	bl	8000bb8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff ff30 	bl	8000be0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff ff41 	bl	8000c08 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff fef4 	bl	8000b74 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000d8c:	bf00      	nop
 8000d8e:	f7ff ff05 	bl	8000b9c <LL_RCC_GetSysClkSource>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1fa      	bne.n	8000d8e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <SystemClock_Config+0x60>)
 8000d9a:	f000 fb63 	bl	8001464 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000d9e:	4802      	ldr	r0, [pc, #8]	; (8000da8 <SystemClock_Config+0x60>)
 8000da0:	f000 fb92 	bl	80014c8 <LL_SetSystemCoreClock>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	007a1200 	.word	0x007a1200

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	463b      	mov	r3, r7
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
 8000dc0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000dc2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000dc6:	f7ff ff33 	bl	8000c30 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000dca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000dce:	f7ff ff2f 	bl	8000c30 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segment_B_Pin|segment_A_Pin|digit_3_Pin|segment_F_Pin
 8000dd2:	f640 11ff 	movw	r1, #2559	; 0x9ff
 8000dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dda:	f7ff ff93 	bl	8000d04 <LL_GPIO_ResetOutputPin>
                          |digit_1_Pin|digit_0_Pin|digit_2_Pin|digit_time_Pin
                          |segment_C_Pin|segment_E_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, segment_DP_Pin|segment_G_Pin|segment_D_Pin);
 8000dde:	2132      	movs	r1, #50	; 0x32
 8000de0:	4813      	ldr	r0, [pc, #76]	; (8000e30 <MX_GPIO_Init+0x84>)
 8000de2:	f7ff ff8f 	bl	8000d04 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segment_B_Pin|segment_A_Pin|digit_3_Pin|segment_F_Pin
 8000de6:	f640 13ff 	movw	r3, #2559	; 0x9ff
 8000dea:	603b      	str	r3, [r7, #0]
                          |digit_1_Pin|digit_0_Pin|digit_2_Pin|digit_time_Pin
                          |segment_C_Pin|segment_E_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dec:	2301      	movs	r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e04:	f000 faa4 	bl	8001350 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = segment_DP_Pin|segment_G_Pin|segment_D_Pin;
 8000e08:	2332      	movs	r3, #50	; 0x32
 8000e0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4803      	ldr	r0, [pc, #12]	; (8000e30 <MX_GPIO_Init+0x84>)
 8000e22:	f000 fa95 	bl	8001350 <LL_GPIO_Init>

}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	48000400 	.word	0x48000400

08000e34 <processToDisplay>:
/* USER CODE BEGIN 4 */




void processToDisplay(void){
 8000e34:	b5b0      	push	{r4, r5, r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0

	char name_ID[] = {"Vladimir_Benak_86422"};
 8000e3a:	4b57      	ldr	r3, [pc, #348]	; (8000f98 <processToDisplay+0x164>)
 8000e3c:	463c      	mov	r4, r7
 8000e3e:	461d      	mov	r5, r3
 8000e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e48:	6020      	str	r0, [r4, #0]
 8000e4a:	3404      	adds	r4, #4
 8000e4c:	7021      	strb	r1, [r4, #0]
	int len = sizeof name_ID / sizeof *name_ID;
 8000e4e:	2315      	movs	r3, #21
 8000e50:	61bb      	str	r3, [r7, #24]
	static uint8_t position4 = 3;

	static bool start = true;


	if(moving == RIGHT && start == false){
 8000e52:	4b52      	ldr	r3, [pc, #328]	; (8000f9c <processToDisplay+0x168>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d11e      	bne.n	8000e98 <processToDisplay+0x64>
 8000e5a:	4b51      	ldr	r3, [pc, #324]	; (8000fa0 <processToDisplay+0x16c>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	f083 0301 	eor.w	r3, r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d017      	beq.n	8000e98 <processToDisplay+0x64>

		position1+=1;
 8000e68:	4b4e      	ldr	r3, [pc, #312]	; (8000fa4 <processToDisplay+0x170>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b4c      	ldr	r3, [pc, #304]	; (8000fa4 <processToDisplay+0x170>)
 8000e72:	701a      	strb	r2, [r3, #0]
		position2+=1;
 8000e74:	4b4c      	ldr	r3, [pc, #304]	; (8000fa8 <processToDisplay+0x174>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b4a      	ldr	r3, [pc, #296]	; (8000fa8 <processToDisplay+0x174>)
 8000e7e:	701a      	strb	r2, [r3, #0]
		position3+=1;
 8000e80:	4b4a      	ldr	r3, [pc, #296]	; (8000fac <processToDisplay+0x178>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	3301      	adds	r3, #1
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b48      	ldr	r3, [pc, #288]	; (8000fac <processToDisplay+0x178>)
 8000e8a:	701a      	strb	r2, [r3, #0]
		position4+=1;
 8000e8c:	4b48      	ldr	r3, [pc, #288]	; (8000fb0 <processToDisplay+0x17c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b46      	ldr	r3, [pc, #280]	; (8000fb0 <processToDisplay+0x17c>)
 8000e96:	701a      	strb	r2, [r3, #0]

	}

	if(moving == LEFT && start == false){
 8000e98:	4b40      	ldr	r3, [pc, #256]	; (8000f9c <processToDisplay+0x168>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d11e      	bne.n	8000ede <processToDisplay+0xaa>
 8000ea0:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <processToDisplay+0x16c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	f083 0301 	eor.w	r3, r3, #1
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d017      	beq.n	8000ede <processToDisplay+0xaa>

		position1-=1;
 8000eae:	4b3d      	ldr	r3, [pc, #244]	; (8000fa4 <processToDisplay+0x170>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <processToDisplay+0x170>)
 8000eb8:	701a      	strb	r2, [r3, #0]
		position2-=1;
 8000eba:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <processToDisplay+0x174>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <processToDisplay+0x174>)
 8000ec4:	701a      	strb	r2, [r3, #0]
		position3-=1;
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <processToDisplay+0x178>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <processToDisplay+0x178>)
 8000ed0:	701a      	strb	r2, [r3, #0]
		position4-=1;
 8000ed2:	4b37      	ldr	r3, [pc, #220]	; (8000fb0 <processToDisplay+0x17c>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b35      	ldr	r3, [pc, #212]	; (8000fb0 <processToDisplay+0x17c>)
 8000edc:	701a      	strb	r2, [r3, #0]

	}



	if(position1 == 0)
 8000ede:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <processToDisplay+0x170>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <processToDisplay+0xb8>
		moving = RIGHT;
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <processToDisplay+0x168>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]


	if(position4 == len-2)
 8000eec:	4b30      	ldr	r3, [pc, #192]	; (8000fb0 <processToDisplay+0x17c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	3b02      	subs	r3, #2
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d102      	bne.n	8000f00 <processToDisplay+0xcc>
		moving = LEFT;
 8000efa:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <processToDisplay+0x168>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	77fb      	strb	r3, [r7, #31]

	while(i<65){
 8000f04:	e03e      	b.n	8000f84 <processToDisplay+0x150>

		setDigitOne();
 8000f06:	f7ff f97b 	bl	8000200 <setDigitOne>
		lightTheChar(name_ID[position1]);
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <processToDisplay+0x170>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	f107 0220 	add.w	r2, r7, #32
 8000f12:	4413      	add	r3, r2
 8000f14:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f84b 	bl	8000fb4 <lightTheChar>
		LL_mDelay(1);
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f000 faae 	bl	8001480 <LL_mDelay>
		setDigitTwo();
 8000f24:	f7ff f984 	bl	8000230 <setDigitTwo>
		lightTheChar(name_ID[position2]);
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <processToDisplay+0x174>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	f107 0220 	add.w	r2, r7, #32
 8000f30:	4413      	add	r3, r2
 8000f32:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f83c 	bl	8000fb4 <lightTheChar>
		LL_mDelay(1);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f000 fa9f 	bl	8001480 <LL_mDelay>
		setDigitThree();
 8000f42:	f7ff f98d 	bl	8000260 <setDigitThree>
		lightTheChar(name_ID[position3]);
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <processToDisplay+0x178>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	f107 0220 	add.w	r2, r7, #32
 8000f4e:	4413      	add	r3, r2
 8000f50:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f82d 	bl	8000fb4 <lightTheChar>
		LL_mDelay(1);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f000 fa90 	bl	8001480 <LL_mDelay>
		setDigitFour();
 8000f60:	f7ff f996 	bl	8000290 <setDigitFour>
		lightTheChar(name_ID[position4]);
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <processToDisplay+0x17c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	f107 0220 	add.w	r2, r7, #32
 8000f6c:	4413      	add	r3, r2
 8000f6e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f81e 	bl	8000fb4 <lightTheChar>
		LL_mDelay(1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f000 fa81 	bl	8001480 <LL_mDelay>

		i++;
 8000f7e:	7ffb      	ldrb	r3, [r7, #31]
 8000f80:	3301      	adds	r3, #1
 8000f82:	77fb      	strb	r3, [r7, #31]
	while(i<65){
 8000f84:	7ffb      	ldrb	r3, [r7, #31]
 8000f86:	2b40      	cmp	r3, #64	; 0x40
 8000f88:	d9bd      	bls.n	8000f06 <processToDisplay+0xd2>





	start = false;
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <processToDisplay+0x16c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]


}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bdb0      	pop	{r4, r5, r7, pc}
 8000f98:	08001548 	.word	0x08001548
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000001 	.word	0x20000001
 8000fa4:	20000028 	.word	0x20000028
 8000fa8:	20000002 	.word	0x20000002
 8000fac:	20000003 	.word	0x20000003
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <lightTheChar>:



void lightTheChar(uint8_t ch){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]

	if(ch=='V')
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b56      	cmp	r3, #86	; 0x56
 8000fc2:	d101      	bne.n	8000fc8 <lightTheChar+0x14>
		V();
 8000fc4:	f7ff f998 	bl	80002f8 <V>

	if(ch=='l')
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b6c      	cmp	r3, #108	; 0x6c
 8000fcc:	d101      	bne.n	8000fd2 <lightTheChar+0x1e>
		L();
 8000fce:	f7ff f9cb 	bl	8000368 <L>

	if(ch=='a' )
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b61      	cmp	r3, #97	; 0x61
 8000fd6:	d101      	bne.n	8000fdc <lightTheChar+0x28>
		A();
 8000fd8:	f7ff f9fe 	bl	80003d8 <A>

	if(ch=='d')
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b64      	cmp	r3, #100	; 0x64
 8000fe0:	d101      	bne.n	8000fe6 <lightTheChar+0x32>
		D();
 8000fe2:	f7ff fa41 	bl	8000468 <D>

	if(ch=='i')
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b69      	cmp	r3, #105	; 0x69
 8000fea:	d101      	bne.n	8000ff0 <lightTheChar+0x3c>
		I();
 8000fec:	f7ff fa7e 	bl	80004ec <I>

	if(ch=='m')
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	2b6d      	cmp	r3, #109	; 0x6d
 8000ff4:	d101      	bne.n	8000ffa <lightTheChar+0x46>
		M();
 8000ff6:	f7ff faad 	bl	8000554 <M>


	if(ch=='r')
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b72      	cmp	r3, #114	; 0x72
 8000ffe:	d101      	bne.n	8001004 <lightTheChar+0x50>
		R();
 8001000:	f7ff fae4 	bl	80005cc <R>

	if(ch=='B')
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b42      	cmp	r3, #66	; 0x42
 8001008:	d101      	bne.n	800100e <lightTheChar+0x5a>
		B();
 800100a:	f7ff fb41 	bl	8000690 <B>

	if(ch=='e')
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	2b65      	cmp	r3, #101	; 0x65
 8001012:	d101      	bne.n	8001018 <lightTheChar+0x64>
		E();
 8001014:	f7ff fb7e 	bl	8000714 <E>

	if(ch=='n')
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b6e      	cmp	r3, #110	; 0x6e
 800101c:	d101      	bne.n	8001022 <lightTheChar+0x6e>
		N();
 800101e:	f7ff fbbb 	bl	8000798 <N>

	if(ch=='k')
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b6b      	cmp	r3, #107	; 0x6b
 8001026:	d101      	bne.n	800102c <lightTheChar+0x78>
		K();
 8001028:	f7ff fbf0 	bl	800080c <K>

	if(ch=='8')
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b38      	cmp	r3, #56	; 0x38
 8001030:	d101      	bne.n	8001036 <lightTheChar+0x82>
		eight();
 8001032:	f7ff fc2f 	bl	8000894 <eight>

	if(ch =='6')
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b36      	cmp	r3, #54	; 0x36
 800103a:	d101      	bne.n	8001040 <lightTheChar+0x8c>
		six();
 800103c:	f7ff fc76 	bl	800092c <six>

	if(ch=='4')
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b34      	cmp	r3, #52	; 0x34
 8001044:	d101      	bne.n	800104a <lightTheChar+0x96>
		four();
 8001046:	f7ff fcb9 	bl	80009bc <four>

	if(ch =='2')
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b32      	cmp	r3, #50	; 0x32
 800104e:	d101      	bne.n	8001054 <lightTheChar+0xa0>
		two();
 8001050:	f7ff fcf2 	bl	8000a38 <two>

	if(ch =='_')
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	2b5f      	cmp	r3, #95	; 0x5f
 8001058:	d101      	bne.n	800105e <lightTheChar+0xaa>
		_();
 800105a:	f7ff faeb 	bl	8000634 <_>


}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  break;
 8001078:	bf00      	nop
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <MemManage_Handler+0x4>

0800108a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler+0x4>

08001096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <SystemInit+0x20>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <SystemInit+0x20>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800112c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <LoopForever+0x6>)
  ldr r1, =_edata
 80010fa:	490e      	ldr	r1, [pc, #56]	; (8001134 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010fc:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <LoopForever+0xe>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001110:	4c0b      	ldr	r4, [pc, #44]	; (8001140 <LoopForever+0x16>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800111e:	f7ff ffd7 	bl	80010d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001122:	f000 f9e1 	bl	80014e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001126:	f7ff fdfb 	bl	8000d20 <main>

0800112a <LoopForever>:

LoopForever:
    b LoopForever
 800112a:	e7fe      	b.n	800112a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800112c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001138:	08001568 	.word	0x08001568
  ldr r2, =_sbss
 800113c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001140:	2000002c 	.word	0x2000002c

08001144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC1_2_IRQHandler>

08001146 <LL_GPIO_SetPinMode>:
{
 8001146:	b480      	push	{r7}
 8001148:	b089      	sub	sp, #36	; 0x24
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	fab3 f383 	clz	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2103      	movs	r1, #3
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	401a      	ands	r2, r3
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa93 f3a3 	rbit	r3, r3
 8001180:	61bb      	str	r3, [r7, #24]
  return result;
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	fab3 f383 	clz	r3, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	431a      	orrs	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	601a      	str	r2, [r3, #0]
}
 8001198:	bf00      	nop
 800119a:	3724      	adds	r7, #36	; 0x24
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_GPIO_SetPinOutputType>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	401a      	ands	r2, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	fb01 f303 	mul.w	r3, r1, r3
 80011c2:	431a      	orrs	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	605a      	str	r2, [r3, #4]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_GPIO_SetPinSpeed>:
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa93 f3a3 	rbit	r3, r3
 80011ee:	613b      	str	r3, [r7, #16]
  return result;
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	fab3 f383 	clz	r3, r3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2103      	movs	r1, #3
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	401a      	ands	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	61bb      	str	r3, [r7, #24]
  return result;
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fab3 f383 	clz	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	431a      	orrs	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	609a      	str	r2, [r3, #8]
}
 8001226:	bf00      	nop
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <LL_GPIO_SetPinPull>:
{
 8001232:	b480      	push	{r7}
 8001234:	b089      	sub	sp, #36	; 0x24
 8001236:	af00      	add	r7, sp, #0
 8001238:	60f8      	str	r0, [r7, #12]
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	fa93 f3a3 	rbit	r3, r3
 800124c:	613b      	str	r3, [r7, #16]
  return result;
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	fab3 f383 	clz	r3, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	2103      	movs	r1, #3
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	401a      	ands	r2, r3
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa93 f3a3 	rbit	r3, r3
 800126c:	61bb      	str	r3, [r7, #24]
  return result;
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	fab3 f383 	clz	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	431a      	orrs	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	60da      	str	r2, [r3, #12]
}
 8001284:	bf00      	nop
 8001286:	3724      	adds	r7, #36	; 0x24
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_GPIO_SetAFPin_0_7>:
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6a1a      	ldr	r2, [r3, #32]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa93 f3a3 	rbit	r3, r3
 80012aa:	613b      	str	r3, [r7, #16]
  return result;
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	fab3 f383 	clz	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	210f      	movs	r1, #15
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	401a      	ands	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	61bb      	str	r3, [r7, #24]
  return result;
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	431a      	orrs	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	621a      	str	r2, [r3, #32]
}
 80012e2:	bf00      	nop
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_GPIO_SetAFPin_8_15>:
{
 80012ee:	b480      	push	{r7}
 80012f0:	b089      	sub	sp, #36	; 0x24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	613b      	str	r3, [r7, #16]
  return result;
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	fab3 f383 	clz	r3, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	210f      	movs	r1, #15
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	401a      	ands	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	0a1b      	lsrs	r3, r3, #8
 8001324:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa93 f3a3 	rbit	r3, r3
 800132c:	61bb      	str	r3, [r7, #24]
  return result;
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	fab3 f383 	clz	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	431a      	orrs	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001344:	bf00      	nop
 8001346:	3724      	adds	r7, #36	; 0x24
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa93 f3a3 	rbit	r3, r3
 8001366:	613b      	str	r3, [r7, #16]
  return result;
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	fab3 f383 	clz	r3, r3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001372:	e051      	b.n	8001418 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	2101      	movs	r1, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d043      	beq.n	8001412 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d003      	beq.n	800139a <LL_GPIO_Init+0x4a>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d10e      	bne.n	80013b8 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	461a      	mov	r2, r3
 80013a0:	69b9      	ldr	r1, [r7, #24]
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ff16 	bl	80011d4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	6819      	ldr	r1, [r3, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	461a      	mov	r2, r3
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fef6 	bl	80011a4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	461a      	mov	r2, r3
 80013be:	69b9      	ldr	r1, [r7, #24]
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff36 	bl	8001232 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d11a      	bne.n	8001404 <LL_GPIO_Init+0xb4>
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	fa93 f3a3 	rbit	r3, r3
 80013d8:	60bb      	str	r3, [r7, #8]
  return result;
 80013da:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80013dc:	fab3 f383 	clz	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b07      	cmp	r3, #7
 80013e4:	d807      	bhi.n	80013f6 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	461a      	mov	r2, r3
 80013ec:	69b9      	ldr	r1, [r7, #24]
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff4e 	bl	8001290 <LL_GPIO_SetAFPin_0_7>
 80013f4:	e006      	b.n	8001404 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	461a      	mov	r2, r3
 80013fc:	69b9      	ldr	r1, [r7, #24]
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff75 	bl	80012ee <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	461a      	mov	r2, r3
 800140a:	69b9      	ldr	r1, [r7, #24]
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fe9a 	bl	8001146 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	fa22 f303 	lsr.w	r3, r2, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1a6      	bne.n	8001374 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3720      	adds	r7, #32
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001442:	4a07      	ldr	r2, [pc, #28]	; (8001460 <LL_InitTick+0x30>)
 8001444:	3b01      	subs	r3, #1
 8001446:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <LL_InitTick+0x30>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <LL_InitTick+0x30>)
 8001450:	2205      	movs	r2, #5
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e010 	.word	0xe000e010

08001464 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800146c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ffdd 	bl	8001430 <LL_InitTick>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <LL_mDelay+0x44>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800148e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001496:	d00c      	beq.n	80014b2 <LL_mDelay+0x32>
  {
    Delay++;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3301      	adds	r3, #1
 800149c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800149e:	e008      	b.n	80014b2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <LL_mDelay+0x44>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <LL_mDelay+0x32>
    {
      Delay--;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	607b      	str	r3, [r7, #4]
  while (Delay)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f3      	bne.n	80014a0 <LL_mDelay+0x20>
    }
  }
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <LL_SetSystemCoreClock+0x1c>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008

080014e8 <__libc_init_array>:
 80014e8:	b570      	push	{r4, r5, r6, lr}
 80014ea:	4e0d      	ldr	r6, [pc, #52]	; (8001520 <__libc_init_array+0x38>)
 80014ec:	4c0d      	ldr	r4, [pc, #52]	; (8001524 <__libc_init_array+0x3c>)
 80014ee:	1ba4      	subs	r4, r4, r6
 80014f0:	10a4      	asrs	r4, r4, #2
 80014f2:	2500      	movs	r5, #0
 80014f4:	42a5      	cmp	r5, r4
 80014f6:	d109      	bne.n	800150c <__libc_init_array+0x24>
 80014f8:	4e0b      	ldr	r6, [pc, #44]	; (8001528 <__libc_init_array+0x40>)
 80014fa:	4c0c      	ldr	r4, [pc, #48]	; (800152c <__libc_init_array+0x44>)
 80014fc:	f000 f818 	bl	8001530 <_init>
 8001500:	1ba4      	subs	r4, r4, r6
 8001502:	10a4      	asrs	r4, r4, #2
 8001504:	2500      	movs	r5, #0
 8001506:	42a5      	cmp	r5, r4
 8001508:	d105      	bne.n	8001516 <__libc_init_array+0x2e>
 800150a:	bd70      	pop	{r4, r5, r6, pc}
 800150c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001510:	4798      	blx	r3
 8001512:	3501      	adds	r5, #1
 8001514:	e7ee      	b.n	80014f4 <__libc_init_array+0xc>
 8001516:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800151a:	4798      	blx	r3
 800151c:	3501      	adds	r5, #1
 800151e:	e7f2      	b.n	8001506 <__libc_init_array+0x1e>
 8001520:	08001560 	.word	0x08001560
 8001524:	08001560 	.word	0x08001560
 8001528:	08001560 	.word	0x08001560
 800152c:	08001564 	.word	0x08001564

08001530 <_init>:
 8001530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001532:	bf00      	nop
 8001534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001536:	bc08      	pop	{r3}
 8001538:	469e      	mov	lr, r3
 800153a:	4770      	bx	lr

0800153c <_fini>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	bf00      	nop
 8001540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001542:	bc08      	pop	{r3}
 8001544:	469e      	mov	lr, r3
 8001546:	4770      	bx	lr
